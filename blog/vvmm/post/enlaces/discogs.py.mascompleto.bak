import requests
import sys

# Establecer variables.
BASE_URL = "https://api.discogs.com"
TOKEN = "LspjLeBvGcPphiSRHHDjwmOyPNhSuvBKQChNwucQ"

def get_artist_releases(artist_id):
    # Construye la URL para obtener los releases del artista
    releases_url = f"{BASE_URL}/artists/{artist_id}/releases?token={TOKEN}"

    try:
        # Realiza la solicitud GET para obtener los releases del artista
        response = requests.get(releases_url)
        response.raise_for_status()  # Lanza una excepción si hay un error en la solicitud

        # Analiza la respuesta JSON
        data = response.json()

        # Retorna los releases del artista
        return data['releases']

    except requests.exceptions.RequestException as e:
        print("Error al hacer la solicitud a la API de Discogs:", e)
        return None

def get_album_info(artist_name, album_name):
    # Construye la URL para buscar el álbum por artista y nombre de álbum
    search_url = f"{BASE_URL}/database/search?q={artist_name} {album_name}&type=master&token={TOKEN}"

    try:
        # Realiza la solicitud GET a la API de Discogs
        response = requests.get(search_url)
        response.raise_for_status()  # Lanza una excepción si hay un error en la solicitud

        # Analiza la respuesta JSON
        data = response.json()

        # Verifica si hay resultados
        if data['pagination']['items'] == 0:
            print(f"No se encontraron resultados para el álbum '{album_name}' del artista '{artist_name}'.")
            print("Álbumes encontrados:")
            for result in data['results']:
                print(f"- {result['title']}")
            
            # Si no se encuentra el álbum, muestra el listado de releases del artista
            artist_id = get_artist_id(artist_name)
            if artist_id:
                artist_releases = get_artist_releases(artist_id)
                if artist_releases:
                    print("Listado de releases del artista:")
                    for release in artist_releases:
                        print(f"{release['title']} - {release['year']} - {release['resource_url']}")
        else:
            # Obtiene el ID del master release del primer resultado
            artist_id = data['results'][0]['id']
            artist_releases = get_artist_releases(artist_id)

            # Si hay releases del artista, devuelve la URL del master si existe
            if artist_releases:
                for release in artist_releases:
                    if release['type'] == "master" and album_name.lower() in release['title'].lower():
                        return "MASTER", release['resource_url']
                
                # Si no hay master, devuelve la URL del primer release simple que coincide con el álbum
                for release in artist_releases:
                    if release['type'] == "release" and album_name.lower() in release['title'].lower():
                        return "RELEASE", release['resource_url']
                
                # Si no se encuentra ningún master ni release, muestra el listado de releases
                print("Listado de releases del artista:")
                for release in artist_releases:
                    print(f"{release['title']} - {release['year']} - {release['resource_url']}")
        
        return None, None

    except requests.exceptions.RequestException as e:
        print("Error al hacer la solicitud a la API de Discogs:", e)
        return None, None

def get_artist_id(artist_name):
    # Construye la URL para buscar al artista por nombre
    search_url = f"{BASE_URL}/database/search?q={artist_name}&type=artist&token={TOKEN}"
    
    try:
        # Realiza la solicitud GET a la API de Discogs
        response = requests.get(search_url)
        response.raise_for_status()  # Lanza una excepción si hay un error en la solicitud

        # Analiza la respuesta JSON
        data = response.json()

        # Verifica si hay resultados
        if data['pagination']['items'] > 0:
            # Devuelve el ID del primer resultado (asumiendo que es el artista correcto)
            return data['results'][0]['id']
        else:
            print(f"No se encontró ningún artista con el nombre '{artist_name}'.")
            return None

    except requests.exceptions.RequestException as e:
        print("Error al hacer la solicitud a la API de Discogs:", e)
        return None

if __name__ == "__main__":
    # Verifica que se pasen los argumentos correctos
    if len(sys.argv) != 3:
        print("Uso: python discogs_api.py <artista> <álbum>")
        sys.exit(1)

    # Obtén los argumentos del artista y el álbum de la línea de comandos
    artist_name = sys.argv[1]
    album_name = sys.argv[2]

    # Obtiene información sobre el álbum
    result_type, result_url = get_album_info(artist_name, album_name)

    # Imprime el resultado
    if result_type is not None:
        if result_type == "MASTER":
            print(f"Master release encontrado: {result_url}")
        elif result_type == "RELEASE":
            print(f"Release encontrado: {result_url}")
    else:
        print("No se encontró el álbum especificado.")

